class Solution {
public:
    vector<int> right (vector<int> h)
    {
        stack<int> st;
        vector<int> v;
        int n= h.size();
        for (int i=n-1;i>=0;i--)
        {
            if (st.empty())   v.push_back(n);
            else if (h[st.top()]< h[i])   v.push_back(st.top());
            else
            {
                while( !st.empty() && h[st.top()]>=h[i])
                {
                    st.pop();
                }
                if (st.empty())   v.push_back(n);
                else v.push_back(st.top());
            }
            
            st.push(i);
        }
        
        reverse(v.begin(),v.end());
        return v;
    }
    vector<int> left (vector<int> h)
    {
        stack<int> st;
        vector<int> v;
        int n= h.size();
        for (int i=0;i<n;i++)
        {
            if (st.empty())   v.push_back(-1);
            else if (h[st.top()]< h[i])   v.push_back(st.top());
            else
            {
                while( !st.empty() && h[st.top()]>=h[i])
                {
                    st.pop();
                }
                if (st.empty())   v.push_back(-1);
                else v.push_back(st.top());
            }
            
            st.push(i);
        }
        
        return v;
    }
    int largestRectangleArea(vector<int>& heights) {
        
        vector<int> nsr=right(heights);
        vector<int> nsl= left(heights);
        
        int maxy=0;
        for (int i=0;i<heights.size();i++)
        {
            int temp=(nsr[i]-nsl[i]-1)* heights[i];
            maxy=max(maxy,temp);
        }
        return maxy;
        
    }
};

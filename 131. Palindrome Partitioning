class Solution {
public:
    bool issafe(string s,int start,int end)
    {
        while(start<end)
        {
            if (s[start]!=s[end])    return false;
            
            start++;
            end--;
        }
        return true;
    }
    void backtrack(string s,int l,int r,vector<vector<string>>& ans,vector<string> & support)
    {
        if (l>r)
        {
            ans.push_back(support);
            return;
        }
        for (int i=l;i<=r;i++)
        {
            if (issafe(s,l,i))
            {
                support.push_back(s.substr(l,i-l+1));
                backtrack(s,i+1,r,ans,support);
                support.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        
        vector<vector<string>> ans;
        if (s.length()==1) 
        {
            vector<string> n;
            n.push_back(s);
            ans.push_back(n);
            return ans;
        }
        vector<string> support;
        int l=0,r=s.length()-1;
        backtrack(s,l,r,ans,support);
        
        return ans;
        
    }
};
